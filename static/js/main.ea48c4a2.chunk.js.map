{"version":3,"sources":["img/grid.png","views/Home/Home.js","components/Emobox/Emobox.js","components/Colorbox/Colorbox.js","components/Title/Title.js","views/Experiment/Experiment.js","firebase.js","views/Result/Result.js","views/Signup/Signup.js","App.js","index.js"],"names":["Home","className","src","gird","alt","to","Emobox","emotion","color","intensity","onPress","direction","style","flexDirection","backgroundColor","onClick","textAlign","Colorbox","id","Title","name","Experiment","grid_Data","updateGridData","data","updatedData","useState","setColor","stimulusC","setStimulusC","finish","setFinish","status","setStatus","hCounter","setHcounter","vCounter","setVcounter","gridData","setGridData","setEmotion","researchData","emotion_","onPressIntensity","hcounter","vcounter","includes","i","map","item","raw_data","push","stimulusCount","updateData","user_info","firstname","marginBottom","element","display","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","appId","REACT_APP_API_ID","firebase","initializeApp","Result","Data","resetData","resetgridData","labels","chartData","reduce","a","b","toFixed","datasets","label","borderColor","borderWidth","barPercentage","categoryPercentage","resetedData","lastname","age","email","resetedgridData","options","scales","x","ticks","font","size","y","plugins","legend","width","justifyContent","Signup","onSignup","userdata","setFirstname","setAge","setEmail","htmlFor","type","onChange","e","target","value","App","setData","basename","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea48c4a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/grid.f3a4782a.png\";","import {Link} from \"react-router-dom\";\nimport gird from '../../img/grid.png'\nimport './Home.css'\n\nconst Home = () => {\n    return (\n            <div className=\"screen-home\">\n                <div className=\"card-home\">\n\n                    <div className=\"right-left-block\">\n                        <div className=\"left-block-home\">\n                            <div className=\"heading\">\n                                <div className=\"rubix-emotion-text\">\n                                    <div className=\"rubix-emotion\">\n                                        <div className=\"rubix\">RUBIX&nbsp;</div>\n                                        <div className=\"emotions\">EMOTIONS</div>\n                                    </div>\n                                    <div className=\"text-intro\">\n                                        A creative amalgamation of UX, Psychology and Neuroscience.\n                            </div>\n                                </div>\n\n                            </div>\n                            <div className=\"grid-img\">\n                                <img src={gird} className=\"img-grid\" alt=\"\" />\n                            </div>\n                        </div>\n                        <div className=\"right-block-home\">\n                            <div className=\"rubix-experiment\">THE RUBIX EXPERIMENT</div>\n                            <p className=\"phase-2\">(PHASE 2)</p>\n                            <p className=\"text-intro\">An attempt at complex emotional data collection and visualisation using a Rubik's Cube and it's matrix assembly</p>\n                            <p className=\"text-intro\">A self devised experiment aimed towards generating visual interpretation of psychological and emotional data</p>\n                            <Link to='/signup'><div className=\"start-button\">\n                                <div className=\"start-block\">\n                                    <div className=\"button-img\">\n                                        <img src=\"https://cdn.animaapp.com/projects/606461ab10c4a1ed9cbe05dd/releases/606461c2925af94e34d26246/img/path-53@1x.png\" className=\"img-button\" alt=\"\" />\n                                    </div>\n                                </div>\n                                <p className=\"start-text\">Press to Start\n                                </p>\n                            </div>\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    )\n}\n\nexport default Home\n","import React from 'react'\nimport './Emobox.css'\nconst Emobox = ({emotion,color,intensity, onPress,direction='column'}) => {\n    return (\n        <>\n            <div className=\"container\" style={{flexDirection:`${direction}`}}>\n                <div className=\"rect\" style={{backgroundColor:`${color}`}} \n                onClick={() => intensity?onPress(intensity):onPress(emotion,color)} \n                >\n                    <h1 className=\"emotion\" style={{color:'#666666',textAlign:'center'}}>\n                        {intensity}\n                    </h1>\n                </div>\n                <div className=\"emotion\" style={{color:`${color==='#FFFFFF'?'#666666':color}`}}>{emotion}</div>\n            </div>\n        </>\n    )\n}\n\nexport default Emobox\n\n","import React from 'react'\nimport './Colorbox.css'\nconst Colorbox = ({color,id}) => {\n    return (\n        <div id={id} className='cbox' style={{backgroundColor:`${color}`}}>\n        </div>\n    )\n}\n\nexport default Colorbox\n","import './Title.css'\nconst Title = ({name}) => {\n    return (\n        <>\n            <div className=\"title\">\n                <div className=\"text-0\">\n                    <span className=\"span-0\">Hi </span>\n                    <span className=\"span-1\">{name}</span>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Title\n","import React, { useState } from 'react'\nimport './Experiment.css'\nimport Emobox from '../../components/Emobox/Emobox'\nimport Colorbox from '../../components/Colorbox/Colorbox'\nimport Title from '../../components/Title/Title'\nimport { Link } from 'react-router-dom'\n\n\nconst Experiment = ({ grid_Data, updateGridData, data, updatedData }) => {\n    const [color, setColor] = useState('#FFFFFFF');\n    const [stimulusC, setStimulusC] = useState(1);\n    const [finish, setFinish] = useState(true);\n    const [status, setStatus] = useState(true);\n    const [hCounter, setHcounter] = useState(0);\n    const [vCounter, setVcounter] = useState(0);\n    const [gridData, setGridData] = useState(grid_Data)\n    const [emotion, setEmotion] = useState('')\n    let researchData = data;\n    const onPress = (emotion_, color) => {\n        if (status) {\n            setColor(color);\n            setEmotion(emotion_);\n            // console.log(emotion_);\n        }\n    };\n    const updateData = (intensity) => {\n        let data = gridData;\n        let hcounter = hCounter;\n        let vcounter = vCounter;\n        if (!['#5F5FFF', '#FD8A01', '#FFFFFF'].includes(color)) {\n            for (let i = 0; i < intensity; i++) {\n                data = data.map((item) => [hcounter * 3 + 1, hcounter * 3 + 2, hcounter * 3 + 3].includes(item.id) ? { ...item, color: color }\n                    : { ...item, color: item.color });\n                hcounter = hcounter > 1 ? 0 : hcounter + 1;\n            }\n\n        }\n        else {\n            for (let i = 0; i < intensity; i++) {\n                data = data.map((item) => [3 - vcounter, 6 - vcounter, 9 - vcounter].includes(item.id) ? { ...item, color: color }\n                    : { ...item, color: item.color });\n                vcounter = vcounter > 1 ? 0 : vcounter + 1;\n\n            }\n        }\n        if (emotion === \"Anger/Annoyance\") {\n            researchData.raw_data.push([\"Anger_Annoyance\", intensity]);\n            researchData.stimulusCount[\"Anger_Annoyance\"] = researchData.stimulusCount[\"Anger_Annoyance\"] + intensity;\n        }\n        else {\n            researchData.raw_data.push([emotion, intensity]);\n            researchData.stimulusCount[emotion] = researchData.stimulusCount[emotion] + intensity;\n        }\n        setGridData(data);\n        setHcounter(hcounter);\n        setVcounter(vcounter);\n    }\n    const onPressIntensity = (intensity) => {\n        if (status) {\n            // console.log(color, intensity);\n            updateData(intensity);\n            setStatus(false)\n        }\n    };\n\n    return (\n        <div className=\"screen-experiment\">\n            <Title name={data.user_info.firstname} />\n            <div className=\"text-1\">\n                How are you feeling?\n            </div>\n            <div className=\"card-experiment\">\n                <div className=\"left-block\">\n                    <div className=\"text-stimulus\">\n                        Stimulus {stimulusC} :\n                    </div>\n                    <div className=\"text-choose\">\n                        Choose Emotional State :\n                    </div>\n                    <div className=\"emo-grid\">\n                        <div className=\"row\">\n                            <Emobox emotion='Disgust' color='#08B282' onPress={onPress} />\n                            <Emobox emotion='Anger/Annoyance' color='#F7572B' onPress={onPress} />\n                            <Emobox emotion='Fear' color='#FEC803' onPress={onPress} />\n                        </div>\n                        <div className=\"row 2\">\n                            <Emobox emotion='Sadness' color='#5F5FFF' onPress={onPress} />\n                            <Emobox emotion='Neutral' color='#FFFFFF' onPress={onPress} />\n                            <Emobox emotion='Happiness' color='#FD8A01' onPress={onPress} />\n                        </div>\n                    </div>\n                    <div className=\"text-choose\">\n                        Choose Emotional Intensity :\n                    </div>\n                    <div className=\"emo-grid\">\n                        <div className=\"row\" style={{ marginBottom: '60px' }}>\n                            <Emobox emotion='Low' color='#FFFFFF' intensity={1} onPress={onPressIntensity} />\n                            <Emobox emotion='Moderate' color='#FFFFFF' intensity={2} onPress={onPressIntensity} />\n                            <Emobox emotion='High' color='#FFFFFF' intensity={3} onPress={onPressIntensity} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"right-block\">\n                    <div className=\"color-grid\">\n                        {\n                            gridData.map(element => {\n                                return (<Colorbox color={element.color} id={element.id} key={element.id} />)\n                            })\n                        }\n                    </div>\n                    <div className=\"expButtons\">\n                        <button className=\"next-stimulus\"\n                            onClick={() => {\n                                if (finish) {\n                                    setStatus(true);\n                                    setStimulusC(stimulusC + 1)\n                                };\n                            }}>Next Stimulus {`>`}</button>\n                        <Link to='/result'\n                            style={{ display: \"flex\" }}\n                            onClick={() => {\n                                updateGridData(gridData);\n                                updatedData(researchData);\n                                // console.log(\"finished\");\n                                // console.log(researchData);\n                                setFinish(false);\n                            }}>\n                            <button className=\"finish-button\">\n                                ✅\n                    </button>\n                        </Link>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Experiment\n","import firebase from 'firebase/app';\nimport 'firebase/database'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey:process.env.REACT_APP_API_KEY,\n    authDomain:process.env.REACT_APP_AUTH_DOMAIN,\n    projectId:process.env.REACT_APP_PROJECT_ID,\n    storageBucket:process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId:process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId:process.env.REACT_APP_API_ID\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import Title from '../../components/Title/Title'\nimport Colorbox from '../../components/Colorbox/Colorbox'\nimport Emobox from '../../components/Emobox/Emobox'\nimport './Result.css'\nimport { Bar } from 'react-chartjs-2'\nimport { Link } from 'react-router-dom'\nimport firebase from '../../firebase'\n\nconst Result = ({ gridData, Data, resetData,resetgridData}) => {\n\n    const labels = [\n        Data.stimulusCount['Sadness'],\n        Data.stimulusCount['Neutral'],\n        Data.stimulusCount['Happiness'],\n        Data.stimulusCount['Disgust'],\n        Data.stimulusCount['Anger_Annoyance'],\n        Data.stimulusCount['Fear']\n    ]\n    const chartData = {\n        labels: labels.map((item) => (item * 100 / labels.reduce((a, b) => a + b)).toFixed(2) + ' %'),\n        datasets: [\n            {\n                label: '# of Values',\n                data: labels,\n                backgroundColor: [\n                    'rgba(95, 95, 255, 1)',\n                    'rgba(255, 255, 255, 1)',\n                    'rgba(253, 138, 1, 1)',\n                    'rgba(8, 178, 130, 1)',\n                    'rgba(247, 87, 43, 1)',\n                    'rgba(254, 200, 3, 1)'\n\n                ],\n                borderColor: [\n                    'rgba(95, 95, 255, 1)',\n                    'rgba(0, 0, 0, 1)',\n                    'rgba(253, 138, 1, 1)',\n                    'rgba(8, 178, 130, 1)',\n                    'rgba(247, 87, 43, 1)',\n                    'rgba(254, 200, 3, 1)'\n                ],\n                borderWidth: 1,\n                barPercentage: 1,\n                categoryPercentage: 0.5,\n\n            },\n        ],\n\n    }\n\n    const options = {\n        scales: {\n            x: {\n                ticks: {\n                    font: {\n                        size: 20\n                    }\n                }\n            },\n            y: {\n                ticks: {\n                    font: {\n                        size: 20\n                    }\n                }\n            },\n\n        },\n        plugins: {\n            legend: {\n                labels: {\n                    font: {\n                        size: 20\n                    }\n                }\n            }\n        }\n    }\n    const resetedData = {\n        user_info:{\n          firstname:'',\n          lastname:'',\n          age:0,\n          email:''\n        },\n        raw_data: [],\n        stimulusCount: {\n          'Disgust': 0,\n          'Anger_Annoyance': 0,\n          'Fear': 0,\n          'Sadness': 0,\n          'Neutral': 0,\n          'Happiness': 0\n        }\n      };\n\n    const resetedgridData = [\n        { id: 1, color: '#FFFFFF' },\n        { id: 2, color: '#FFFFFF' },\n        { id: 3, color: '#FFFFFF' },\n        { id: 4, color: '#FFFFFF' },\n        { id: 5, color: '#FFFFFF' },\n        { id: 6, color: '#FFFFFF' },\n        { id: 7, color: '#FFFFFF' },\n        { id: 8, color: '#FFFFFF' },\n        { id: 9, color: '#FFFFFF' }\n      ];  \n    const pushData = () => {\n        //--------uncomment below code when firebase is configured -------//\n        // const dataRef = firebase.database().ref('Participant-info');\n        // dataRef.push(Data);\n        \n    }\n    return (\n        <div className=\"screen-result\">\n\n            <Title name={Data.user_info.firstname} />\n            <div className=\"card-result\">\n                <div className=\"left-block\">\n                    <div className=\"chart\">\n                        <Bar data={chartData} options={options} />\n                    </div>\n                    <div className=\"emo-grid-result\">\n                        <div className=\"row-result\">\n                            <Emobox emotion='Disgust' color='#08B282' direction={'row'} onPress={() => null} />\n                            <Emobox emotion='Anger/Annoyance' color='#F7572B' direction={'row'} onPress={() => null} />\n                            <Emobox emotion='Fear' color='#FEC803' direction={'row'} onPress={() => null} />\n                        </div>\n                        <div className=\"row-result\">\n                            <Emobox emotion='Sadness' color='#5F5FFF' direction={'row'} onPress={() => null} />\n                            <Emobox emotion='Neutral' color='#FFFFFF' direction={'row'} onPress={() => null} />\n                            <Emobox emotion='Happiness' color='#FD8A01' direction={'row'} onPress={() => null} />\n                        </div>\n                    </div>\n                </div>\n                <div className=\"right-block\">\n                    <div className=\"color-grid\">\n                        {\n                            gridData.map(element => {\n                                return (<Colorbox color={element.color} id={element.id} key={element.id} />)\n                            })\n                        }\n                    </div>\n                    <Link to='/' onClick={() => {\n                        pushData();\n                        resetData(resetedData);\n                        resetgridData(resetedgridData);\n                    }}\n                    style={{display:'flex', width:'75%', justifyContent:'center'}}>\n                        <button className=\"end-exp\">\n                            End Experiment {`>`}</button>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Result\n","import './Signup.css'\nimport { Link } from 'react-router-dom'\nimport { useState } from 'react'\n\nconst Signup = ({ onSignup, userdata }) => {\n\n    const [firstname, setFirstname] = useState('');\n    const [age, setAge] = useState(0);\n    const [email, setEmail] = useState('');\n    \n    let data = userdata;\n    if (firstname && age && email) {\n        data.user_info.firstname = firstname;\n        data.user_info.age = age;\n        data.user_info.email = email;\n    }\n\n    return (\n        <div className='screen-signup'>\n            <div className=\"card-login\">\n                <div className=\"header\">\n                    <img src=\"https://anima-uploads.s3.amazonaws.com/projects/606461ab10c4a1ed9cbe05dd/releases/606461c2925af94e34d26246/img/path-102@1x.png\" alt=\"\" className=\"icon\" />\n                    <h1 className=\"hello\">Hello !</h1>\n                    <p className=\"text-account\">Enter Your Details</p>\n                </div>\n                <div className=\"form-container\">\n                    <form className=\"signup-form\">\n                        <div className=\"full-name\">\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"first-name\">First Name</label>\n                                <input type=\"text\" id=\"first-name\" onChange={e => { setFirstname(e.target.value) }} />\n                            </div>\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"\" className=\"last-name\">Last Name</label>\n                                <input type=\"text\" id=\"last-name\" onChange={e => { data.user_info.lastname = e.target.value }} />\n                            </div>\n                        </div>\n                        <div className=\"age-field\">\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"age\" className=\"age\">Age</label>\n                                <input type=\"number\" id=\"age\" onChange={e => { setAge(e.target.value) }} />\n                            </div>\n                        </div>\n                        <div className=\"email-address\">\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"email\" className=\"email\">Email Address</label>\n                                <input type=\"email\" id=\"email\" onChange={e => { setEmail(e.target.value) }} />\n                            </div>\n                        </div>\n                        {/* <div className=\"password-field\">\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"password\" className=\"password\"> Password </label>\n                                <input type=\"password\" id=\"password\" />\n                            </div>\n                            <div className=\"label-input-margin\">\n                                <label htmlFor=\"confirmPassword\" className=\"password\">Confirm Password</label>\n                                <input type=\"password\" id=\"confirmPassword\" />\n                            </div>\n                        </div> */}\n                        {\n                            firstname && age && email ? <Link to='/experiment' onClick={onSignup(data)}>\n                                <button className=\"submit\">\n                                    Submit &nbsp;&nbsp;&nbsp;<b>{`>`}</b>\n                                </button>\n                            </Link> : true\n                        }\n                    </form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default Signup\n","import React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\nimport Home from './views/Home/Home'\nimport Experiment from './views/Experiment/Experiment'\nimport Result from './views/Result/Result'\nimport Signup from './views/Signup/Signup'\n\nconst App = () => {\n\n  const [gridData, setGridData] = useState([\n    { id: 1, color: '#FFFFFF' },\n    { id: 2, color: '#FFFFFF' },\n    { id: 3, color: '#FFFFFF' },\n    { id: 4, color: '#FFFFFF' },\n    { id: 5, color: '#FFFFFF' },\n    { id: 6, color: '#FFFFFF' },\n    { id: 7, color: '#FFFFFF' },\n    { id: 8, color: '#FFFFFF' },\n    { id: 9, color: '#FFFFFF' }\n  ]);\n\n  const [data, setData] = useState({\n    user_info:{\n      firstname:'',\n      lastname:'',\n      age:0,\n      email:''\n    },\n    raw_data: [],\n    stimulusCount: {\n      'Disgust': 0,\n      'Anger_Annoyance': 0,\n      'Fear': 0,\n      'Sadness': 0,\n      'Neutral': 0,\n      'Happiness': 0\n    }\n  })\n\n\n  return (\n    <div>\n      <Router basename={'/rubix-emotions'}>\n        \n        <Switch>\n        \n          <Route path=\"/signup\">\n            <Signup onSignup={(data) => setData(data)} userdata={data}/>\n          </Route>\n          <Route path=\"/experiment\">\n            <Experiment grid_Data={gridData}\n              updateGridData={(data) => setGridData(data)}\n              data={data}\n              updatedData={(data) => setData(data)} />\n          </Route>\n          <Route path=\"/result\">\n            <Result gridData={gridData} Data={data} resetData={(data) => setData(data)} resetgridData={(data) => setGridData(data)}/>\n          </Route>\n          <Route path=\"/\">\n            <Home/>\n          </Route>\n\n        </Switch>\n      </Router>\n\n\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}